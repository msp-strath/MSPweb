{-# LANGUAGE DeriveGeneric, OverloadedStrings #-}
module Main where

import Prelude hiding (div)
import GHC.Generics
import Data.Yaml
import qualified Data.ByteString as BS
import Data.List
import Html

type Markdown = String

data Edition
  = Edition
  { year :: Int
  , people :: [ String ]
  , link :: Maybe String
  } deriving (Show, Eq, Generic)


instance FromJSON Edition

data DegreeKind = UG | PG
  deriving (Show, Eq, Generic)

instance FromJSON DegreeKind where
  parseJSON (String "UG") = pure UG
  parseJSON (String "PG") = pure PG
  parseJSON _ = fail "invalid degree kind"

data Course
  = Course
  { code :: String
  , kind :: DegreeKind
  , name :: String
  , description :: Maybe String
  , level :: Int
  , editions :: [Edition]
  } deriving (Show, Eq, Generic)


instance FromJSON Course

data Teaching
  = Teaching
  { preamble :: String
  , courses :: [Course]
  } deriving (Show, Eq, Generic)

instance FromJSON Teaching

editionToHTML :: Edition -> HTML
editionToHTML e
  = unlines
  [ p (show (year e))
  , ulist
     ([ p $ "Staff: " ++ flatList (people e) ]
      ++
      (maybe [] (\l -> [anchor l "Content"]) (link e)))
  ]

editionsToHTML :: [Edition] -> HTML
editionsToHTML es
  = details "Editions"
  $ ulist
  $ map editionToHTML es

courseToHTML :: Course -> HTML
courseToHTML c
  = div "card"
    (concat
      [ h2 $ unwords [code c, "(" ++ show (kind c) ++ ")", name c]
       , maybe "" p (description c)
       , editionsToHTML (editions c)
       ])
------------------------------------------------------------------------------

main :: IO ()
main = do
  f <- BS.readFile "teaching.yaml"
  case decodeEither' f of
    Left err ->
      error (show err)
    Right teaching -> do
      let header = "### default.html(section.teaching=current,headtags=<link rel='stylesheet' href='{{rootPath}}css/pure.css' type='text/css'/>)\n<!-- DO NOT EDIT THIS FILE DIRECTLY â€” EDIT teaching.yaml AND RUN GenerateTeaching.hs INSTEAD -->"
      let pre = p $ preamble teaching
      let body = (unlines (map courseToHTML (courses teaching)))
      writeFile "teaching.html" (header ++ pre ++ body)

flatList :: [String] -> String
flatList [] = ""
flatList [x] = x
flatList (x:y:xs) = x ++ ", " ++ flatList (y:xs)
